name: CI/CD

on:
  push:
  create:
  release:
  pull_request:
  workflow_dispatch:

jobs:
  build-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pushd ./client
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pushd ./client
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: server - npm install, build, and test
        run: |
          pushd ./server
          npm ci
          npm run test --if-present
          npm run build --if-present
          popd
        env:
          CI: true

  build-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [server, client]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v3

    - name: Docker Login
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
      env:
        REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
      run: |
        echo "${REGISTRY_PASSWORD}" | docker login ${REGISTRY_HOST} --username "${REGISTRY_USERNAME}" --password-stdin

    - name: Cache Docker layers
      uses: actions/cache@v2
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.project }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx

    - name: Docker Buildx
      env:
        REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
      run: |
        PUSH=false
        VERSION=temp
        DOCKER_IMAGE=${REGISTRY_HOST}/${{ github.repository }}-${{ matrix.project }}

        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          PUSH=true
        fi

        if [[ $GITHUB_REF == refs/heads/master ]]; then
          VERSION=master
          PUSH=true
        fi

        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"

        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi

        docker buildx build \
          --build-arg VERSION=${{ github.sha }} \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --output "type=image,push=${PUSH}" \
          --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
          ${TAGS} ${{ matrix.project }}

  trigger-webhooks:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - name: Trigger Webhooks
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -X POST -H "Content-Type: application/json" -d "{}" '${{ secrets.SERVER_WEBHOOK }}'
